{"ast":null,"code":"var _jsxFileName = \"C:\\\\Markatlas\\\\test\\\\Aitgiant-Test-Admin\\\\src\\\\components\\\\DownloadPage.js\",\n  _s = $RefreshSig$();\n// DownloadPage.js\nimport { useEffect } from 'react';\nimport { db } from '../firebase'; // Import your Firestore instance\nimport { google } from 'googleapis';\nimport { getDocs, collection } from 'firebase/firestore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DownloadPage = () => {\n  _s();\n  useEffect(() => {\n    // Function to download form data as Google Sheets\n    const downloadFormDataAsSheet = async () => {\n      try {\n        // Fetch form data from Firestore\n        const querySnapshot = await getDocs(collection(db, 'formData'));\n        const formData = querySnapshot.docs.map(doc => doc.data());\n\n        // Initialize Google Sheets API\n        const auth = new google.auth.GoogleAuth({\n          keyFile: './lms-1-36b1f-896498e0edb6.json',\n          // Path to your service account key file\n          scopes: ['https://www.googleapis.com/auth/spreadsheets']\n        });\n        const sheets = google.sheets({\n          version: 'v4',\n          auth\n        });\n\n        // Create new Google Sheets file\n        const res = await sheets.spreadsheets.create({\n          resource: {\n            properties: {\n              title: 'Form Data'\n            }\n          }\n        });\n\n        // Get the newly created spreadsheet ID\n        const spreadsheetId = res.data.spreadsheetId;\n\n        // Write form data to the spreadsheet\n        const response = await sheets.spreadsheets.values.update({\n          spreadsheetId,\n          range: 'Sheet1',\n          valueInputOption: 'RAW',\n          requestBody: {\n            values: [Object.keys(formData[0]), ...formData.map(entry => Object.values(entry))]\n          }\n        });\n        console.log('Sheet created and data written:', response.data);\n      } catch (error) {\n        console.error('Error downloading form data as sheet:', error);\n      }\n    };\n\n    // Call the download function\n    downloadFormDataAsSheet();\n  }, []); // Run once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Downloading Form Data as Google Sheets\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The form data is being downloaded as a Google Sheets file...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(DownloadPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DownloadPage;\nexport default DownloadPage;\nvar _c;\n$RefreshReg$(_c, \"DownloadPage\");","map":{"version":3,"names":["useEffect","db","google","getDocs","collection","jsxDEV","_jsxDEV","DownloadPage","_s","downloadFormDataAsSheet","querySnapshot","formData","docs","map","doc","data","auth","GoogleAuth","keyFile","scopes","sheets","version","res","spreadsheets","create","resource","properties","title","spreadsheetId","response","values","update","range","valueInputOption","requestBody","Object","keys","entry","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Markatlas/test/Aitgiant-Test-Admin/src/components/DownloadPage.js"],"sourcesContent":["// DownloadPage.js\r\nimport { useEffect } from 'react';\r\nimport { db } from '../firebase'; // Import your Firestore instance\r\nimport { google } from 'googleapis';\r\nimport { getDocs, collection } from 'firebase/firestore'; \r\n\r\nconst DownloadPage = () => {\r\n  useEffect(() => {\r\n    // Function to download form data as Google Sheets\r\n    const downloadFormDataAsSheet = async () => {\r\n      try {\r\n        // Fetch form data from Firestore\r\n        const querySnapshot = await getDocs(collection(db, 'formData'));\r\n        const formData = querySnapshot.docs.map((doc) => doc.data());\r\n\r\n        // Initialize Google Sheets API\r\n        const auth = new google.auth.GoogleAuth({\r\n          keyFile: './lms-1-36b1f-896498e0edb6.json', // Path to your service account key file\r\n          scopes: ['https://www.googleapis.com/auth/spreadsheets'],\r\n        });\r\n        const sheets = google.sheets({ version: 'v4', auth });\r\n\r\n        // Create new Google Sheets file\r\n        const res = await sheets.spreadsheets.create({\r\n          resource: {\r\n            properties: {\r\n              title: 'Form Data',\r\n            },\r\n          },\r\n        });\r\n\r\n        // Get the newly created spreadsheet ID\r\n        const spreadsheetId = res.data.spreadsheetId;\r\n\r\n        // Write form data to the spreadsheet\r\n        const response = await sheets.spreadsheets.values.update({\r\n          spreadsheetId,\r\n          range: 'Sheet1',\r\n          valueInputOption: 'RAW',\r\n          requestBody: {\r\n            values: [Object.keys(formData[0]), ...formData.map((entry) => Object.values(entry))],\r\n          },\r\n        });\r\n\r\n        console.log('Sheet created and data written:', response.data);\r\n      } catch (error) {\r\n        console.error('Error downloading form data as sheet:', error);\r\n      }\r\n    };\r\n\r\n    // Call the download function\r\n    downloadFormDataAsSheet();\r\n  }, []); // Run once when the component mounts\r\n\r\n  return (\r\n    <div>\r\n      <h1>Downloading Form Data as Google Sheets</h1>\r\n      <p>The form data is being downloaded as a Google Sheets file...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DownloadPage;\r\n"],"mappings":";;AAAA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,EAAE,QAAQ,aAAa,CAAC,CAAC;AAClC,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,OAAO,EAAEC,UAAU,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzBR,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1C,IAAI;QACF;QACA,MAAMC,aAAa,GAAG,MAAMP,OAAO,CAACC,UAAU,CAACH,EAAE,EAAE,UAAU,CAAC,CAAC;QAC/D,MAAMU,QAAQ,GAAGD,aAAa,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;;QAE5D;QACA,MAAMC,IAAI,GAAG,IAAId,MAAM,CAACc,IAAI,CAACC,UAAU,CAAC;UACtCC,OAAO,EAAE,iCAAiC;UAAE;UAC5CC,MAAM,EAAE,CAAC,8CAA8C;QACzD,CAAC,CAAC;QACF,MAAMC,MAAM,GAAGlB,MAAM,CAACkB,MAAM,CAAC;UAAEC,OAAO,EAAE,IAAI;UAAEL;QAAK,CAAC,CAAC;;QAErD;QACA,MAAMM,GAAG,GAAG,MAAMF,MAAM,CAACG,YAAY,CAACC,MAAM,CAAC;UAC3CC,QAAQ,EAAE;YACRC,UAAU,EAAE;cACVC,KAAK,EAAE;YACT;UACF;QACF,CAAC,CAAC;;QAEF;QACA,MAAMC,aAAa,GAAGN,GAAG,CAACP,IAAI,CAACa,aAAa;;QAE5C;QACA,MAAMC,QAAQ,GAAG,MAAMT,MAAM,CAACG,YAAY,CAACO,MAAM,CAACC,MAAM,CAAC;UACvDH,aAAa;UACbI,KAAK,EAAE,QAAQ;UACfC,gBAAgB,EAAE,KAAK;UACvBC,WAAW,EAAE;YACXJ,MAAM,EAAE,CAACK,MAAM,CAACC,IAAI,CAACzB,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,GAAGA,QAAQ,CAACE,GAAG,CAAEwB,KAAK,IAAKF,MAAM,CAACL,MAAM,CAACO,KAAK,CAAC,CAAC;UACrF;QACF,CAAC,CAAC;QAEFC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEV,QAAQ,CAACd,IAAI,CAAC;MAC/D,CAAC,CAAC,OAAOyB,KAAK,EAAE;QACdF,OAAO,CAACE,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;;IAED;IACA/B,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEH,OAAA;IAAAmC,QAAA,gBACEnC,OAAA;MAAAmC,QAAA,EAAI;IAAsC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/CvC,OAAA;MAAAmC,QAAA,EAAG;IAA4D;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEV,CAAC;AAACrC,EAAA,CAtDID,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAwDlB,eAAeA,YAAY;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}